# Default values for liqo.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- Images' tag to select a development version of liqo instead of a release
tag: ""
# -- The pullPolicy for liqo pods
pullPolicy: "IfNotPresent"
apiServer:
  # -- The address that must be used to contact your API server, it needs to be reachable from the clusters that you will peer with (defaults to your master IP)
  address: ""
  # -- The port that must be used to contact your API server
  port: "6443"
  # -- Indicates that the API Server is exposing a certificate issued by a trusted Certification Authority
  trustedCA: false

controllerManager:
  pod:
    # -- advertisement pod annotations
    annotations: {}
    # -- advertisement pod labels
    labels: {}
  # -- advertisement image repository
  imageName: "liqo/liqo-controller-manager"
  config:
    # -- It defines the percentage of available cluster resources that you are willing to share with foreign clusters.
    resourceSharingPercentage: 30
    # -- If set to false, the remote clusters will not be able to leverage your resources, but you will still be able to use theirs.
    enableBroadcaster: true

route:
  pod:
    # -- route pod annotations
    annotations: {}
    # -- route pod labels
    labels: {}
  # -- route image repository
  imageName: "liqo/liqonet"

gateway:
  pod:
    # -- gateway pod annotations
    annotations: {}
    # -- gateway pod labels
    labels: {}
  # -- gateway image repository
  imageName: "liqo/liqonet"
  service:
    # -- If you plan to use liqo over the Internet consider to change this field to "LoadBalancer".
    # More generally, if your cluster nodes are not directly reachable by the cluster to whom you are peering then change it to "LoadBalancer"
    type: "NodePort"
    annotations: {}

networkManager:
  pod:
    # -- networkManager pod annotations
    annotations: {}
    # -- networkManager pod labels
    labels: {}
  # -- networkManager image repository
  imageName: "liqo/liqonet"
  config:
    # -- The subnet used by the cluster for the pods, in CIDR notation
    podCIDR: ""
    # -- The subnet used by the cluster for the services, in CIDR notation
    serviceCIDR: ""
    # -- Usually the IPs used for the pods in k8s clusters belong to private subnets
    # In order to prevent IP conflicting between locally used private subnets in your infrastructure and private subnets belonging to remote clusters
    # you need tell liqo the subnets used in your cluster. E.g if your cluster nodes belong to the 192.168.2.0/24 subnet then
    # you should add that subnet to the reservedSubnets. PodCIDR and serviceCIDR used in the local cluster are automatically added to the reserved list.
    reservedSubnets: []
    # -- Set of additional network pools. 
    # Network pools are used to map a cluster network into another one in order to prevent conflicts.
    # Default set of network pools is: [10.0.0.0/8, 192.168.0.0/16, 172.16.0.0/12]
    additionalPools: []

crdReplicator:
  pod:
    # -- crdReplicator pod annotations
    annotations: {}
    # -- crdReplicator pod labels
    labels: {}
  # -- crdReplicator image repository
  imageName: "liqo/crd-replicator"

discovery:
  pod:
    # -- discovery pod annotations
    annotations: {}
    # -- discovery pod labels
    labels: {}
  # -- discovery image repository
  imageName: "liqo/discovery"
  config:
    # -- Set a mnemonic name for your cluster
    clusterName: ""
    # -- A set of labels which characterizes the local cluster when exposed remotely as a virtual node.
    # It is suggested to specify the distinguishing characteristics that may be used to decide whether to offload pods on this cluster.
    clusterLabels: {}
     # topology.kubernetes.io/zone: us-east-1
     # liqo.io/provider: your-provider

    # -- Automatically join discovered cluster exposing the Authentication Service with a valid certificate
    autojoin: true
    # -- Automatically join discovered cluster exposing the Authentication Service with a self-signed certificate
    autojoinUntrusted: true
    # -- Enable the mDNS advertisement on LANs, set to false to not be discoverable from other clusters in the same LAN
    enableAdvertisement: true
    # -- Enable the mDNS discovery on LANs, set to false to not look for other clusters available in the same LAN
    enableDiscovery: true
    # -- Time-to-live before an automatically discovered clusters is deleted from the list of available ones if no longer announced (in seconds)
    ttl: 90

auth:
  pod:
    # -- auth pod annotations
    annotations: {}
    # -- auth pod labels
    labels: {}
  # -- auth image repository
  imageName: "liqo/auth-service"
  initContainer:
    # -- auth init container image repository
    imageName: "liqo/cert-creator" 
  service:
    # -- The type of service used to expose the Authentication Service
    # If you are exposing this service with an Ingress consider to change it to ClusterIP,
    # otherwise if you plan to use liqo over the Internet consider to change this field to "LoadBalancer".
    # See https://doc.liqo.io/user/install/pre-install/ for more details.
    type: "NodePort"
    # -- auth service annotations
    annotations: {}
  # -- Enable TLS for the Authentication Service Pod (using a self-signed certificate).
  # If you are exposing this service with an Ingress consider to disable it or add the appropriate annotations to the Ingress resource.
  tls: true
  # -- Overrides the port were your service is available, you should configure it if behind a NAT or using an Ingress with a port different from 443.
  portOverride: ""
  ingress:
    # -- Auth ingress annotations
    annotations: {}
    # -- Whether to enable the creation of the Ingress resource
    enable: false
    # -- Set the hostname for your ingress
    host: ""
    # -- Set your ingress class
    class: ""
  config:
    # -- Set to true to disable the authentication of discovered clusters. NB: use it only for testing installations
    allowEmptyToken: false

webhook:
  pod:
    # -- webhook pod annotations
    annotations: {}
    # -- webhook pod labels
    labels: {}
  # -- webhook image repository
  imageName: "liqo/liqo-webhook"
  initContainer:
    # -- webhook init container image repository
    imageName: "liqo/webhook-configuration"
  service:
    # -- webhook service annotations
    annotations: {}
  mutatingWebhookConfiguration:
    # -- mutatingWebhookConfiguration annotations
    annotations: {}

peeringRequest:
  pod:
    # -- peering request pod annotations
    annotations: {}
    # -- peering request pod labels
    labels: {}
  # -- peeringRequest image repository
  imageName:  "liqo/peering-request-operator"

virtualKubelet:
  # -- virtual kubelet image repository
  imageName: "liqo/virtual-kubelet"
  initContainer:
    # -- virtual kubelet init container image repository
    imageName: "liqo/init-virtual-kubelet"

# -- liqo name override
nameOverride: ""
# -- full liqo name override
fullnameOverride: ""

# aws configuration for the local cluster and the Liqo user,
# this user should be able to create new IAM user, to create new programmatic access
# credentials, and to describe EKS clusters.
# NOTE: set it only if running on EKS, otherwise let this fields with the default value
awsConfig:
  # -- accessKeyID for the Liqo user
  accessKeyId: ""
  # -- secretAccessKey for the Liqo user
  secretAccessKey: ""
  # -- AWS region where the clsuter is runnnig
  region: ""
  # -- name of the EKS cluster
  clusterName: ""

# capsule subchart configuration
capsule:
  # -- liqo needs capsule to work properly, but you can use your already deployed capsule installation
  install: true
  # -- override the fullname to fix naming problems
  fullnameOverride: capsule
  manager:
    options:
      # list of supported organizations in the headers of the certificates.
      # By default capsule uses the capsule.clastix.io organization, while
      # the Liqo generated certificates will have the liqo.io organization name.
      capsuleUserGroups:
      - capsule.clastix.io
      - liqo.io
