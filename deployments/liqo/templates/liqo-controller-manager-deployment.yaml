---
{{- $ctrlManagerConfig := (merge (dict "name" "controller-manager" "module" "controller-manager") .) -}}
{{- $webhookConfig := (merge (dict "name" "webhook" "module" "webhook") .) -}}
{{- $netManagerConfig := (merge (dict "name" "network-manager" "module" "networking") .) -}}
{{- $awsConfig := (merge (dict "name" "aws-config" "module" "aws-config") .) -}}

{{- $vkargs := .Values.virtualKubelet.extra.args }}
{{- /* Enable the API support if not overridden by the user */ -}}
{{- if not (or (has "--enable-apiserver-support" $vkargs ) (has "--enable-apiserver-support=true" $vkargs ) (has "--enable-apiserver-support=false" $vkargs )) }}
{{- $vkargs = append $vkargs "--enable-apiserver-support=true" }}
{{- end }}
{{- /* Configure the appropriate flags if the internal networking is disabled, if not overridden by the user */ -}}
{{- if not .Values.networking.internal }}
{{- if not (or (has "--node-check-network" $vkargs ) (has "--node-check-network=true" $vkargs ) (has "--node-check-network=false" $vkargs )) }}
{{- $vkargs = append $vkargs "--node-check-network=false" }}
{{- end }}
{{- end }}
{{- /* Configure the appropriate flags if the IP reflection is disabled, if not overridden by the user */ -}}
{{- if not .Values.networking.reflectIPs }}
{{- if not (or (has "--disable-ip-reflection" $vkargs ) (has "--disable-ip-reflection=true" $vkargs ) (has "--disable-ip-reflection=false" $vkargs )) }}
{{- $vkargs = append $vkargs "--disable-ip-reflection" }}
{{- end }}
{{- end }}
{{- /* Configure the appropriate certificate generation approach on EKS clusters, if not overridden by the user */ -}}
{{- if .Values.authentication.awsConfig.accessKeyId }}
{{- if not (or (has "--certificate-type=kubelet" $vkargs ) (has "--certificate-type=aws" $vkargs ) (has "--certificate-type=self-signed" $vkargs )) }}
{{- $vkargs = append $vkargs "--certificate-type=aws" }}
{{- end }}
{{- end }}

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    {{- include "liqo.labels" $ctrlManagerConfig | nindent 4 }}
  name: {{ include "liqo.prefixedName" $ctrlManagerConfig }}
spec:
  replicas: {{ .Values.controllerManager.replicas }}
  selector:
    matchLabels:
      {{- include "liqo.selectorLabels" $ctrlManagerConfig | nindent 6 }}
  template:
    metadata:
    {{- if .Values.controllerManager.pod.annotations }}
      annotations:
      {{- toYaml .Values.controllerManager.pod.annotations | nindent 8 }}
    {{- end }}
      labels:
        {{- include "liqo.labels" $ctrlManagerConfig | nindent 8 }}
      {{- if .Values.controllerManager.pod.labels }}
        {{- toYaml .Values.controllerManager.pod.labels | nindent 8 }}
      {{- end }}
    spec:
      {{- if gt .Values.controllerManager.replicas 1.0 }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  {{- include "liqo.selectorLabels" $ctrlManagerConfig | nindent 18 }}
              topologyKey: kubernetes.io/hostname
      {{- end }}
      securityContext:
        {{- include "liqo.podSecurityContext" . | nindent 8 }}
      serviceAccountName: {{ include "liqo.prefixedName" $ctrlManagerConfig }}
      containers:
      - image: {{ .Values.controllerManager.imageName }}{{ include "liqo.suffix" $ctrlManagerConfig }}:{{ include "liqo.version" $ctrlManagerConfig }}
        imagePullPolicy: {{ .Values.pullPolicy }}
        securityContext:
          {{- include "liqo.containerSecurityContext" . | nindent 10 }}
        name: {{ $ctrlManagerConfig.name }}
        command: ["/usr/bin/liqo-controller-manager"]
        args:
          - --cluster-id=$(CLUSTER_ID)
          - --cluster-name={{ .Values.discovery.config.clusterName }}
          - --liqo-namespace=$(POD_NAMESPACE)
          - --authentication-enabled={{ .Values.authentication.enabled }}
          - --offloading-enabled={{ .Values.offloading.enabled }}
          - --pod-reflection-workers={{ .Values.offloading.reflection.pod.workers }}
          - --service-reflection-workers={{ .Values.offloading.reflection.service.workers }}
          - --endpointslice-reflection-workers={{ .Values.offloading.reflection.endpointslice.workers }}
          - --ingress-reflection-workers={{ .Values.offloading.reflection.ingress.workers }}
          - --configmap-reflection-workers={{ .Values.offloading.reflection.configmap.workers }}
          - --secret-reflection-workers={{ .Values.offloading.reflection.secret.workers }}
          - --serviceaccount-reflection-workers={{ .Values.offloading.reflection.serviceaccount.workers }}
          - --persistentvolumeclaim-reflection-workers={{ .Values.offloading.reflection.persistentvolumeclaim.workers }}
          - --event-reflection-workers={{ .Values.offloading.reflection.event.workers }}
          - --service-reflection-type={{ .Values.offloading.reflection.service.type }}
          - --ingress-reflection-type={{ .Values.offloading.reflection.ingress.type }}
          - --configmap-reflection-type={{ .Values.offloading.reflection.configmap.type }}
          - --secret-reflection-type={{ .Values.offloading.reflection.secret.type }}
          - --event-reflection-type={{ .Values.offloading.reflection.event.type }}
          {{- $d := dict "commandName" "--default-node-resources" "dictionary" .Values.offloading.defaultNodeResources -}}
          {{- include "liqo.concatenateMap" $d | nindent 10 }}
          {{- if .Values.authentication.awsConfig.accessKeyId }}
          - --aws-access-key-id=$(ACCESS_KEY_ID)
          {{- end }}
          {{- if .Values.authentication.awsConfig.secretAccessKey }}
          - --aws-secret-access-key=$(SECRET_ACCESS_KEY)
          {{- end }}
          {{- if .Values.authentication.awsConfig.region }}
          - --aws-region={{ .Values.authentication.awsConfig.region }}
          {{- end }}
          {{- if .Values.authentication.awsConfig.clusterName }}
          - --aws-cluster-name={{ .Values.authentication.awsConfig.clusterName }}
          {{- end }}
          {{- if .Values.apiServer.address }}
          - --api-server-address-override={{ .Values.apiServer.address }}
          {{- end }}
          {{- if .Values.apiServer.ca }}
          - --ca-override={{ .Values.apiServer.ca }}
          {{- end }}
          {{- if .Values.apiServer.trustedCA }}
          - --trusted-ca
          {{- end }}
          {{- if not .Values.offloading.runtimeClass.enable }}
          - --add-virtual-node-toleration-on-offloaded-pods
          {{- end }}
          {{- if .Values.offloading.reflection.skip.labels }}
          {{- $d := dict "commandName" "--labels-not-reflected" "list" .Values.offloading.reflection.skip.labels }}
          {{- include "liqo.concatenateList" $d | nindent 10 }}
          {{- end }}
          {{- if .Values.offloading.reflection.skip.annotations }}
          {{- $d := dict "commandName" "--annotations-not-reflected" "list" .Values.offloading.reflection.skip.annotations }}
          {{- include "liqo.concatenateList" $d | nindent 10 }}
          {{- end }}
          - --kubelet-image={{ .Values.virtualKubelet.imageName }}{{ include "liqo.suffix" $ctrlManagerConfig }}:{{ include "liqo.version" $ctrlManagerConfig }}
          {{- if .Values.virtualKubelet.metrics.enabled }}
          - --kubelet-metrics-address=:{{ .Values.virtualKubelet.metrics.port }}
          - --kubelet-metrics-enabled={{ .Values.virtualKubelet.metrics.enabled }}
          {{- else }}
          {{- end }}
          {{- if .Values.networkManager.externalIPAM.enabled }}
          - --kubelet-ipam-server={{ .Values.networkManager.externalIPAM.url }}
          {{- else if not .Values.networking.internal }}
          - --kubelet-ipam-server=
          - --disable-internal-network
          {{- else }}
          - --kubelet-ipam-server={{ include "liqo.prefixedName" $netManagerConfig }}.{{ .Release.Namespace }}:6000
          {{- end }}
          - --auto-join-discovered-clusters={{ .Values.discovery.config.autojoin }}
          - --enable-storage={{ .Values.storage.enable }}
          - --webhook-port={{ .Values.webhook.port }}
          {{- if .Values.storage.enable }}
          - --virtual-storage-class-name={{ .Values.storage.virtualStorageClassName }}
          - --real-storage-class-name={{ .Values.storage.realStorageClassName }}
          - --storage-namespace={{ .Values.storage.storageNamespace }}
          {{- end }}
          {{- $d := dict "commandName" "--ingress-classes" "list" .Values.offloading.reflection.ingress.ingressClasses }}
          {{- include "liqo.concatenateListDefault" $d | nindent 10 }}
          {{- $d := dict "commandName" "--load-balancer-classes" "list" .Values.offloading.reflection.service.loadBalancerClasses }}
          {{- include "liqo.concatenateListDefault" $d | nindent 10 }}
          {{- if .Values.controllerManager.config.enableResourceEnforcement }}
          - --enable-resource-enforcement
          {{- end }}
          {{- if .Values.controllerManager.config.enableNodeFailureController }}
          - --enable-node-failure-controller
          {{- end }}
          {{- if .Values.virtualKubelet.extra.annotations }}
          {{- $d := dict "commandName" "--kubelet-extra-annotations" "dictionary" .Values.virtualKubelet.extra.annotations }}
          {{- include "liqo.concatenateMap" $d | nindent 10 }}
          {{- end }}
          {{- if .Values.virtualKubelet.extra.labels }}
          {{- $d := dict "commandName" "--kubelet-extra-labels" "dictionary" .Values.virtualKubelet.extra.labels }}
          {{- include "liqo.concatenateMap" $d | nindent 10 }}
          {{- end }}
          {{- if ge (len $vkargs) 1 }}
          {{- $d := dict "commandName" "--kubelet-extra-args" "list" $vkargs }}
          {{- include "liqo.concatenateList" $d | nindent 10 }}
          {{- end }}
          {{- if .Values.virtualKubelet.virtualNode.extra.annotations }}
          {{- $d := dict "commandName" "--node-extra-annotations" "dictionary" .Values.virtualKubelet.virtualNode.extra.annotations }}
          {{- include "liqo.concatenateMap" $d | nindent 10 }}
          {{- end }}
          {{- if .Values.virtualKubelet.virtualNode.extra.labels }}
          {{- $d := dict "commandName" "--node-extra-labels" "dictionary" .Values.virtualKubelet.virtualNode.extra.labels }}
          {{- include "liqo.concatenateMap" $d | nindent 10 }}
          {{- end }}
          {{- if .Values.common.extraArgs }}
          {{- toYaml .Values.common.extraArgs | nindent 10 }}
          {{- end }}
          {{- if .Values.controllerManager.pod.extraArgs }}
          {{- toYaml .Values.controllerManager.pod.extraArgs | nindent 10 }}
          {{- end }}
          {{- if .Values.discovery.config.clusterLabels }}
          {{- $d := dict "commandName" "--cluster-labels" "dictionary" .Values.discovery.config.clusterLabels }}
          {{- include "liqo.concatenateMap" $d | nindent 10 }}
          {{- end }}
          {{- if gt .Values.controllerManager.replicas 1.0 }}
          - --enable-leader-election=true
          {{- end }}
          {{- /* virtual kubelet pod containers' requests */ -}}
          {{- range $resource, $value := .Values.virtualKubelet.extra.resources.requests }}
          {{- if eq $resource "cpu" }}
          - --kubelet-cpu-requests={{ $value }}
          {{- else if eq $resource "memory" }}
          - --kubelet-ram-requests={{ $value }}
          {{- else }}
          {{ fail (printf "Unsupported resource type \"%s\" for virtual kubelet containers' requests" $resource) }}
          {{- end }}
          {{- end }}
          {{- /* virtual kubelet pod containers' limits */ -}}
          {{- range $resource, $value := .Values.virtualKubelet.extra.resources.limits }}
          {{- if eq $resource "cpu" }}
          - --kubelet-cpu-limits={{ $value }}
          {{- else if eq $resource "memory" }}
          - --kubelet-ram-limits={{ $value }}
          {{- else }}
          {{ fail (printf "Unsupported resource type \"%s\" for virtual kubelet containers' limits" $resource) }}
          {{- end }}
          {{- end }}
        env:
          - name: CLUSTER_ID
            valueFrom:
              configMapKeyRef:
                name: {{ include "liqo.clusterIdConfig" . }}
                key: CLUSTER_ID
          - name: POD_NAMESPACE
            valueFrom:
             fieldRef:
               fieldPath: metadata.namespace
          {{- if .Values.authentication.awsConfig.accessKeyId }}
          - name: ACCESS_KEY_ID
            valueFrom:
              {{- if .Values.authentication.awsConfig.useExistingSecret }}
              secretKeyRef:
                name: {{ .Values.authentication.awsConfig.accessKeyId.secretKeyRef.name }}
                key: {{ .Values.authentication.awsConfig.accessKeyId.secretKeyRef.key }}
              {{- else }}
              secretKeyRef:
                name: {{ include "liqo.prefixedName" $awsConfig }}
                key: ACCESS_KEY_ID
              {{- end }}
          {{- end }}
          {{- if .Values.authentication.awsConfig.secretAccessKey }}
          - name: SECRET_ACCESS_KEY
            valueFrom:
              {{- if .Values.authentication.awsConfig.useExistingSecret }}
              secretKeyRef:
                name: {{ .Values.authentication.awsConfig.secretAccessKey.secretKeyRef.name }}
                key: {{ .Values.authentication.awsConfig.secretAccessKey.secretKeyRef.key }}
              {{- else }}
              secretKeyRef:
                name: {{ include "liqo.prefixedName" $awsConfig }}
                key: SECRET_ACCESS_KEY
              {{- end }}
          {{- end }}
        resources: {{- toYaml .Values.controllerManager.pod.resources | nindent 10 }}
        volumeMounts:
          - name: webhook-certs
            mountPath: /tmp/k8s-webhook-server/serving-certs/
            readOnly: true
        ports:
        - name: webhook
          containerPort: {{ .Values.webhook.port }}
          protocol: TCP
        - name: healthz
          containerPort: 8081
          protocol: TCP
        - name: metrics
          containerPort: 8080
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readyz
            port: healthz
      volumes:
      - name: webhook-certs
        secret:
          secretName: {{ include "liqo.prefixedName" $webhookConfig }}-certs
          defaultMode: 420
      {{- if ((.Values.common).nodeSelector) }}
      nodeSelector:
      {{- toYaml .Values.common.nodeSelector | nindent 8 }}
      {{- end }}
      {{- if ((.Values.common).tolerations) }}
      tolerations:
      {{- toYaml .Values.common.tolerations | nindent 8 }}
      {{- end }}
      {{- if ((.Values.common).affinity) }}
      affinity:
      {{- toYaml .Values.common.affinity | nindent 8 }}
      {{- end }}
      {{- if .Values.controllerManager.pod.priorityClassName }}
      priorityClassName: {{ .Values.controllerManager.pod.priorityClassName }}
      {{- end }}
