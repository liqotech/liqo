{{- $templateConfig := (merge (dict "name" "wireguard-server" "module" "networking") .) -}}
{{- $gatewayConfig := (merge (dict "name" "gateway" "module" "networking" "version" .Values.networking.gatewayTemplates.container.gateway.image.version) .) -}}
{{- $wireguardConfig := (merge (dict "name" "gateway-wireguard" "module" "networking" "version" .Values.networking.gatewayTemplates.container.wireguard.image.version) .) -}}
{{- $geneveConfig := (merge (dict "name" "gateway-geneve" "module" "networking" "version" .Values.networking.gatewayTemplates.container.geneve.image.version) .) -}}

{{- if and .Values.networking.enabled .Values.authentication.awsConfig.accessKeyId }}

apiVersion: networking.liqo.io/v1beta1
kind: WgGatewayServerTemplate
metadata:
  name: {{ $templateConfig.name  }}
  labels:
    {{- include "liqo.labels" $templateConfig | nindent 4 }}
spec:
  objectKind:
    apiVersion: networking.liqo.io/v1beta1
    kind: WgGatewayServer
  template:
    metadata:
      {{- include "liqo.metadataTemplate" $templateConfig | nindent 6 }}
    spec:
      secretRef:
        name: "{{"{{ .Spec.SecretRef.Name }}"}}"
      service:
        metadata:
          {{- include "liqo.metadataTemplate" $templateConfig | nindent 10 }}
          {{- if .Values.networking.gatewayTemplates.server.service.annotations }}
          annotations:
            {{- toYaml .Values.networking.gatewayTemplates.server.service.annotations | nindent 12 }}
            service.beta.kubernetes.io/aws-load-balancer-type: external
            service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: ip
            service.beta.kubernetes.io/aws-load-balancer-healthcheck-port: "80"
            service.beta.kubernetes.io/aws-load-balancer-healthcheck-protocol: TCP 
            service.beta.kubernetes.io/aws-load-balancer-healthcheck-healthy-threshold: "3"
            service.beta.kubernetes.io/aws-load-balancer-healthcheck-unhealthy-threshold: "3"
            service.beta.kubernetes.io/aws-load-balancer-healthcheck-timeout: "10"
            service.beta.kubernetes.io/aws-load-balancer-healthcheck-interval: "10"   
            service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing
          {{- end }}
        spec:
          selector:
            {{- include "liqo.selectorTemplate" (merge (dict "isService" true) $templateConfig) | nindent 12 }}
          type: "{{"{{ .Spec.Endpoint.ServiceType }}"}}"
          ports:
          - port: "{{"{{ .Spec.Endpoint.Port }}"}}"
            protocol: UDP
            targetPort: "{{"{{ .Spec.Endpoint.Port }}"}}"
          {{- if .Values.networking.gatewayTemplates.server.service.allocateLoadBalancerNodePorts }}
          allocateLoadBalancerNodePorts: {{ .Values.networking.gatewayTemplates.server.service.allocateLoadBalancerNodePorts }}
          {{- end }}
      deployment:
        metadata:
          {{- include "liqo.metadataTemplate" $templateConfig | nindent 10 }}
        spec:
          replicas: {{ .Values.networking.gatewayTemplates.replicas }}
          strategy:
            type: Recreate
          selector:
            matchLabels:
              {{- include "liqo.selectorTemplate" $templateConfig | nindent 14 }}
          template:
            metadata:
              {{- include "liqo.metadataTemplate" $templateConfig | nindent 14 }}
            spec:
              serviceAccount: "{{"{{ .Name }}"}}"
              serviceAccountName: "{{"{{ .Name }}"}}"
              containers:
              - name: gateway
                image: {{ .Values.networking.gatewayTemplates.container.gateway.image.name }}{{ include "liqo.suffix" $gatewayConfig }}:{{ include "liqo.version" $gatewayConfig }}
                imagePullPolicy: {{ .Values.pullPolicy }}
                args:
                - --name={{"{{ .Name }}"}}
                - --namespace={{"{{ .Namespace }}"}}
                - --remote-cluster-id={{"{{ .ClusterID }}"}}
                - --node-name={{"$(NODE_NAME)"}}
                - --pod-name={{"$(POD_NAME)"}}
                - --gateway-uid={{"{{ .GatewayUID }}"}}
                - --mode=server
                - --container-name=gateway
                - --concurrent-containers-names=wireguard,geneve
                {{- if .Values.common.globalAnnotations }}
                {{- $d := dict "commandName" "--global-annotations" "dictionary" .Values.common.globalAnnotations -}}
                {{- include "liqo.concatenateMap" $d | nindent 16 }}
                {{- end }}
                {{- if .Values.common.globalLabels }}
                {{- $d := dict "commandName" "--global-labels" "dictionary" .Values.common.globalLabels -}}
                {{- include "liqo.concatenateMap" $d | nindent 16 }}
                {{- end }}
                {{- if .Values.metrics.enabled }}
                - --metrics-address=:8082
                {{- end }}
                - --health-probe-bind-address=:8083
                - --ping-enabled=true
                - --ping-loss-threshold={{ .Values.networking.gatewayTemplates.ping.lossThreshold }}
                - --ping-interval={{ .Values.networking.gatewayTemplates.ping.interval }}
                - --ping-update-status-interval={{ .Values.networking.gatewayTemplates.ping.updateStatusInterval }}
                - --leader-election=true
                {{- if not .Values.requirements.kernel.enabled }}
                - --disable-kernel-version-check
                {{- end }}
                volumeMounts: 
                - name: ipc 
                  mountPath: /ipc
                {{- if .Values.metrics.enabled }}
                ports:
                - containerPort: 8082
                  name: gw-metrics
                {{- end }}
                ports:
                - containerPort: 8083
                  name: healthz
                # ATTENTION: uncomment the readinessProbe section if you are aware of the consequences.
                # If you have more replicas of the same gateway, the passive ones will not reach the ready state.
                #readinessProbe:
                #  httpGet:
                #    path: /readyz
                #    port: healthz
                env:
                - name: NODE_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: spec.nodeName
                - name: POD_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
                securityContext:
                  privileged: true
                  capabilities:
                    add:
                    - NET_ADMIN
                    - NET_RAW
              - name: wireguard
                image: {{ .Values.networking.gatewayTemplates.container.wireguard.image.name }}{{ include "liqo.suffix" $wireguardConfig }}:{{ include "liqo.version" $wireguardConfig }}
                imagePullPolicy: {{ .Values.pullPolicy }}
                args:
                - --name={{"{{ .Name }}"}}
                - --namespace={{"{{ .Namespace }}"}}
                - --remote-cluster-id={{"{{ .ClusterID }}"}}
                - --gateway-uid={{"{{ .GatewayUID }}"}}
                - --mode=server
                - --container-name=wireguard
                - --mtu={{"{{ .Spec.MTU }}"}}
                - --listen-port={{"{{ .Spec.Endpoint.Port }}"}}
                {{- if .Values.metrics.enabled }}
                - --metrics-address=:8084
                {{- end }}
                - --health-probe-bind-address=:8085
                - --implementation={{ .Values.networking.gatewayTemplates.wireguard.implementation }}
                {{- if .Values.metrics.enabled }}
                ports:
                - containerPort: 8084
                  name: wg-metrics
                {{- end }}
                ports:
                - containerPort: 8085
                  name: healthz
                # ATTENTION: uncomment the readinessProbe section if you are aware of the consequences.
                # If you have more replicas of the same gateway, the passive ones will not reach the ready state.
                #readinessProbe:
                #  httpGet:
                #    path: /readyz
                #    port: healthz
                securityContext:
                  capabilities:
                    add:
                    - NET_ADMIN
                    - NET_RAW
                  {{ if .Values.networking.gatewayTemplates.wireguard.implementation | eq "userspace" }}
                  privileged: true
                  {{ end }}
                volumeMounts:
                - name: ipc 
                  mountPath: /ipc
                - name: wireguard-config
                  mountPath: /etc/wireguard/keys
              - name: geneve
                image: {{ .Values.networking.gatewayTemplates.container.geneve.image.name }}{{ include "liqo.suffix" $geneveConfig }}:{{ include "liqo.version" $geneveConfig }}
                imagePullPolicy: {{ .Values.pullPolicy }}
                args:
                - --name={{"{{ .Name }}"}}
                - --namespace={{"{{ .Namespace }}"}}
                - --remote-cluster-id={{"{{ .ClusterID }}"}}
                - --node-name={{"$(NODE_NAME)"}}
                - --pod-name={{"$(POD_NAME)"}}
                - --gateway-uid={{"{{ .GatewayUID }}"}}
                - --mode=server
                - --container-name=geneve
                - --geneve-port={{ .Values.networking.genevePort }}
                {{- if .Values.metrics.enabled }}
                - --metrics-address=:8086
                {{- end }}
                - --health-probe-bind-address=:8087
                volumeMounts: 
                - name: ipc 
                  mountPath: /ipc
                {{- if .Values.metrics.enabled }}
                ports:
                - containerPort: 8086
                  name: gv-metrics
                {{- end }}
                ports:
                - containerPort: 8087
                  name: healthz
                # ATTENTION: uncomment the readinessProbe section if you are aware of the consequences.
                # If you have more replicas of the same gateway, the passive ones will not reach the ready state.
                #readinessProbe:
                #  httpGet:
                #    path: /readyz
                #    port: healthz
                env:
                - name: NODE_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: spec.nodeName
                - name: POD_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
                securityContext:
                  capabilities:
                    add:
                    - NET_ADMIN
                    - NET_RAW
              - name: tcp-healthcheck
                image: nginx
              # Uncomment to set a priorityClassName
              # priorityClassName: ""
              volumes:
              - name: wireguard-config
                secret:
                  secretName: "{{"{{ .SecretName }}"}}"
              - name: ipc 
                emptyDir: {} 
{{- end }}
