name: Unit Testing
on:
  repository_dispatch:
    types:
      - test-command
  push:
    branches:
      - master

jobs:
  configure:
    name: Preliminary configuration
    runs-on: ubuntu-latest
    outputs:
      commit-ref: ${{ steps.configure.outputs.commit-ref }}
      repo-suffix: ${{ steps.configure.outputs.repo-suffix }}
      repo-name: ${{ steps.configure.outputs.repo-name }}
    steps:
    - name: Configure
      id: configure
      run: |
        # The ref of the commit to checkout (do not use the merge commit if pull request)
        if [ "${{ github.event_name }}" == "repository_dispatch" ]; then
          echo "::set-output name=commit-ref::${{ github.event.client_payload.pull_request.head.sha }}"
        elif [ "${{ steps.get_version.outputs.VERSION }}" != "" ]; then
          echo "::set-output name=commit-ref::${{ steps.get_version.outputs.VERSION }}"
        else
          echo "::set-output name=commit-ref::${{ github.sha }}"
        fi

        if [ "${{ github.event_name }}" != "repository_dispatch" ]; then
           echo "::set-output name=repo-name::${{ github.repository }}"
        else
           echo "::set-output name=repo-name::${{ github.event.client_payload.github.payload.repository.full_name }}"
        fi


    # Since we are using a repository-dispatch event, we have to explicitly set a run check. We initialize it to a "pending" state.
    - uses: octokit/request-action@v2.x
      name: "Initialize run check to 'pending'"
      with:
        route: POST /repos/${{ github.repository }}/statuses/${{ steps.configure.outputs.commit-ref }}
        state: "pending"
        description: "Unit Test status"
        context:  "Unit Test"
        target_url: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
      env:
        GITHUB_TOKEN: ${{ secrets.CI_TOKEN }}
      if: ${{ github.event_name == 'repository_dispatch' }}

  test:
    name: Launch Test
    runs-on: ubuntu-20.04
    needs: configure    
    steps:

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
      with:
        ref: "${{ needs.configure.outputs.commit-ref }}"
        repository: "${{ needs.configure.outputs.repo-name }}"
        persist-credentials: false

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-${{ matrix.component }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.component }}-buildx-

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build (and Publish) liqo-test image
      uses: docker/build-push-action@v2
      with:
        context: .
        platforms: linux/amd64
        tags: |
          liqo/liqo-test:latest
          liqo/liqo-test:${{ needs.configure.outputs.commit-ref }}
        load: true
        file: build/liqo-test/Dockerfile
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new
        # This ugly bit is necessary if you don't want your cache to grow forever
        # till it hits GitHub's limit of 5GB.
        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896

    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    - name: Fetch External CRDs
      run: make fetch-external-crds

    - name: Launch Test (Docker Container)
      uses: addnab/docker-run-action@v3
      with:
        options: |
          --mount type=bind,src=${{ github.workspace }},dst=/go/src/liqotech/liqo
          --workdir /go/src/liqotech/liqo
          --privileged=true
        image: liqo/liqo-test:${{ needs.configure.outputs.commit-ref }}
        run: |
          go-acc ./... --ignore liqo/test/e2e

      # Since we are using a repository-dispatch event, we have to explicitly set a run check. We update it to the actual status.
    - uses: octokit/request-action@v2.x
      name: "Update run check status"
      with:
        route: POST /repos/${{ github.repository }}/statuses/${{ needs.configure.outputs.commit-ref }}
        state: "${{ job.status }}"
        description: "Unit Test status"
        context: "Unit Test"
        target_url: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
      env:
        GITHUB_TOKEN: ${{ secrets.CI_TOKEN }}
      if: ${{ !cancelled() && github.event_name == 'repository_dispatch' }}

    - name: Send coverage
      uses: shogo82148/actions-goveralls@v1.4.5
      with:
        path-to-profile: coverage.txt
