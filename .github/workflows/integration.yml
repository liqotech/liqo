name: Integration Pipeline
on:
  push:
    tags:
      - 'v*'
    branches:
      - master
  pull_request_target:
    types:
      - opened
      - reopened
      - synchronize
jobs:
  configure:
    name: Preliminary configuration
    runs-on: ubuntu-latest
    outputs:
      commit_ref: ${{ steps.configure.outputs.commit_ref }}
      repo-suffix: ${{ steps.configure.outputs.repo-suffix }}
      ok-to-continue: ${{ steps.configure.outputs.ok-to-continue }}
      master: ${{ steps.configure.outputs.master }}
      repo-name: ${{ steps.configure.outputs.repo-name }}
      architectures: ${{ steps.configure.outputs.architectures }}
    steps:
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)
      if: startsWith(github.ref, 'refs/tags/v')
    - name: Configure
      id: configure
      run: |
        # The ref of the commit to checkout (do not use the merge commit if pull request)
        if [ "${{ github.event_name }}" == "pull_request_target" ]; then
          echo "::set-output name=master::false"
          echo "::set-output name=architectures::linux/amd64"
          echo "::set-output name=commit_ref::${{ github.event.pull_request.head.sha }}"
        elif [ "${{ steps.get_version.outputs.VERSION }}" != "" ]; then
          echo "::set-output name=master::false"
          echo "::set-output name=architectures::linux/amd64,linux/arm64"
          echo "::set-output name=commit_ref::${{ steps.get_version.outputs.VERSION }}"
        else
          echo "::set-output name=master::true"
          echo "::set-output name=architectures::linux/amd64,linux/arm64"
          echo "::set-output name=commit_ref::${{ github.sha }}"
        fi

        # The suffix to append to the repository name if not triggered by a push to master
        [[ "${{ steps.get_version.outputs.VERSION }}" == "" ]] && \
          echo "::set-output name=repo-suffix::-ci" ||
          echo "::set-output name=repo-suffix::"

        if [ "${{ github.event_name }}" != "pull_request_target" ]; then
           echo "::set-output name=ok-to-continue::true"
           echo "::set-output name=repo-name::${{ github.repository }}"
        elif [ "${{ github.event.pull_request.head.repo.full_name }}" == "${{ github.repository }}" ]; then
           echo "::set-output name=ok-to-continue::true"
           echo "::set-output name=repo-name::${{ github.repository }}"
        elif [ "${{ contains(github.event.pull_request.labels.*.name, 'ok-to-test') }}" == "true" ]; then
           echo "::set-output name=ok-to-continue::true"
           echo "::set-output name=repo-name::${{ github.event.pull_request.head.repo.full_name }}"
        else
           echo "::set-output name=ok-to-continue::false"
           echo "::set-output name=repo-name::${{ github.event.pull_request.head.repo.full_name }}"
        fi

  build:
    runs-on: ubuntu-latest
    needs: configure
    if: needs.configure.outputs.ok-to-continue == 'true'
    strategy:
      fail-fast: false
      matrix:
        component:
        - auth-service
        - cert-creator
        - crd-replicator
        - liqo-controller-manager
        - liqo-test
        - discovery
        - init-virtual-kubelet
        - liqonet
        - liqo-webhook
        - uninstaller
        - virtual-kubelet
        - webhook-configuration
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1.0.1
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Check out code
        uses: actions/checkout@v2
        with:
          ref: "${{ needs.configure.outputs.commit_ref }}"
          repository: "${{ needs.configure.outputs.repo-name }}"
          persist-credentials: false

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-${{ matrix.component }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.component }}-buildx-

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Configure the build-push-action dockerfile path
        id: dockerfile
        run: |
          [[ -d "build/${{ matrix.component }}" ]] && \
            echo "::set-output name=path::build/${{ matrix.component }}/Dockerfile" || \
            echo "::set-output name=path::build/common/Dockerfile"

      - name: Build (and Publish) ${{ matrix.component }} image
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: ${{ needs.configure.outputs.architectures }}
          tags: |
            liqo/${{ matrix.component }}${{ needs.configure.outputs.repo-suffix }}:latest
            liqo/${{ matrix.component }}${{ needs.configure.outputs.repo-suffix }}:${{ needs.configure.outputs.commit_ref }}
          push: true
          file: ${{ steps.dockerfile.outputs.path }}
          build-args: |
            COMPONENT=${{ matrix.component }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
        # This ugly bit is necessary if you don't want your cache to grow forever
        # till it hits GitHub's limit of 5GB.
        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache


  e2e-test-trigger:
     runs-on: ubuntu-latest
     needs: [build, configure]
     if: needs.configure.outputs.ok-to-continue == 'true' && github.event.pull_request.draft == false
     steps:
       - name: Notify Event to E2E Tests
         uses: peter-evans/repository-dispatch@v1
         with:
           token: ${{ secrets.CI_TOKEN }}
           repository: liqotech/liqops
           event-type: "dev-event"
           client-payload: |
             {
               "master": "${{ needs.configure.outputs.master }}",
               "commit": "${{ needs.configure.outputs.commit_ref }}",
               "repo-name": "${{ needs.configure.outputs.repo-name }}"
             }

  docs-pipeline-trigger:
    runs-on: ubuntu-latest
    needs: configure
    if: needs.configure.outputs.ok-to-continue == 'true' && github.event.pull_request.draft == false
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          ref: "${{ needs.configure.outputs.commit_ref }}"
          repository: "${{ needs.configure.outputs.repo-name }}"
          persist-credentials: false
      - name: Check if /docs files changed
        uses: dorny/paths-filter@v2
        id: pathFilter
        with:
          filters: |
            docs:
              - 'docs/**'
      - name: Notify Event to doc-website
        if: steps.pathFilter.outputs.docs == 'true'
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.CI_TOKEN }}
          repository: liqotech/doc-website
          event-type: "dev-event"
          client-payload: |
            {
              "master": "${{ needs.configure.outputs.master }}",
              "commit": "${{ needs.configure.outputs.commit_ref }}",
              "repo-name": "${{ needs.configure.outputs.repo-name }}"
            }

  release:
    runs-on: ubuntu-latest
    needs: [build, test, configure]
    if: github.event_name == 'push' && github.event.repository.full_name == 'liqotech/liqo' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          # The changelog generation requires the entire history
          fetch-depth: 0
          ref: "${{ needs.configure.outputs.commit_ref }}"
          repository: "${{ needs.configure.outputs.repo-name }}"
          persist-credentials: false

      - name: Get the latest Liqo release
        uses: pozetroninc/github-action-get-latest-release@v0.5.0
        id: last-release
        with:
          repository: ${{ github.repository }}

      - name: Generate the CHANGELOG
        uses: heinrichreimer/github-changelog-generator-action@v2.2
        id: changelog
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          # Changelog will start from this tag.
          sinceTag: ${{ steps.last-release.outputs.release }}
          # Include pull-requests in changelog.
          pullRequests: true
          # Include pull requests without labels in changelog.
          prWoLabels: true
          # Add author of pull request at the end.
          author: true
          # Use GitHub tags instead of Markdown links for the author of an issue or pull-request.
          usernamesAsGithubLogins: true
          # Do not include compare link (Full Changelog) between older version and newer version.
          compareLink: false
          # Issues with the specified labels will be excluded from changelog.
          excludeLabels: kind/no-changelog
          # Define your own set of sections which overrides all default sections.
          configureSections: '{
              "breaking": {"labels": ["kind/breaking"], "prefix": "### :boom: Breaking Change"},
              "feature": {"labels": ["kind/feature","kind/epic"], "prefix": "### :rocket: New Features"},
              "bug": {"labels": ["kind/bug"], "prefix": "### :bug: Bug Fixes"},
              "cleanup": {"labels": ["kind/cleanup"], "prefix": "### :broom: Code Refactoring"},
              "docs": {"labels": ["kind/docs"], "prefix": "### :memo: Documentation"}
            }'
          # Do not include issues in the changelog
          issues: false
          # Run verbosely
          verbose: true

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ needs.configure.outputs.commit_ref }}
          release_name: ${{ needs.configure.outputs.commit_ref }}
          body_path: ./CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.CI_TOKEN }}

      - name: Trigger Chart Upload
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.CI_TOKEN }}
          repository: liqotech/liqops
          event-type: "release"
          client-payload: |
             {
               "version": "${{ needs.configure.outputs.commit_ref }}"
             }

  test:
    name: Launch Test
    runs-on: ubuntu-20.04
    needs: [configure, build]
    if: needs.configure.outputs.ok-to-continue == 'true' && github.event.pull_request.draft == false
    steps:

    - name: Set up Go 1.16
      uses: actions/setup-go@v2
      with:
        go-version: 1.16
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
      with:
        ref: "${{ needs.configure.outputs.commit_ref }}"
        repository: "${{ needs.configure.outputs.repo-name }}"
        persist-credentials: false

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Fetch External CRDs
      run: make fetch-external-crds

    - name: Launch Test (Docker Container)
      uses: addnab/docker-run-action@v3
      with:
        options: |
            --mount type=bind,src=${{ github.workspace }},dst=/go/src/liqotech/liqo
            --workdir /go/src/liqotech/liqo
            --privileged=true
        image: liqo/liqo-test${{ needs.configure.outputs.repo-suffix }}:${{ needs.configure.outputs.commit_ref }}
        run: |
          go-acc ./... --ignore liqo/test/e2e

    - name: Send coverage
      uses: shogo82148/actions-goveralls@v1.4.3
      with:
        path-to-profile: coverage.txt

  wait-approve:
    name: Wait for the ok-to-test label to test pr on fork
    runs-on: ubuntu-20.04
    needs: configure
    if: needs.configure.outputs.ok-to-continue == 'false'
    steps:
      - name: Issue the greeting comment
        uses: peter-evans/create-or-update-comment@v1
        with:
            token: ${{ secrets.CI_TOKEN }}
            issue-number: ${{ github.event.pull_request.number }}
            body: |
              Hi @${{ github.event.pull_request.user.login }}. Thanks for your PR!

              I'm waiting for a Liqo member to verify that this patch is reasonable to test. If it is, they should reply with /ok-to-test.

              Once the patch is verified, the new status will be reflected by the ok-to-test label.
