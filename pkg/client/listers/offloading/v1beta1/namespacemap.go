// Copyright 2019-2024 The Liqo Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/listers"
	"k8s.io/client-go/tools/cache"

	v1beta1 "github.com/liqotech/liqo/apis/offloading/v1beta1"
)

// NamespaceMapLister helps list NamespaceMaps.
// All objects returned here must be treated as read-only.
type NamespaceMapLister interface {
	// List lists all NamespaceMaps in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.NamespaceMap, err error)
	// NamespaceMaps returns an object that can list and get NamespaceMaps.
	NamespaceMaps(namespace string) NamespaceMapNamespaceLister
	NamespaceMapListerExpansion
}

// namespaceMapLister implements the NamespaceMapLister interface.
type namespaceMapLister struct {
	listers.ResourceIndexer[*v1beta1.NamespaceMap]
}

// NewNamespaceMapLister returns a new NamespaceMapLister.
func NewNamespaceMapLister(indexer cache.Indexer) NamespaceMapLister {
	return &namespaceMapLister{listers.New[*v1beta1.NamespaceMap](indexer, v1beta1.Resource("namespacemap"))}
}

// NamespaceMaps returns an object that can list and get NamespaceMaps.
func (s *namespaceMapLister) NamespaceMaps(namespace string) NamespaceMapNamespaceLister {
	return namespaceMapNamespaceLister{listers.NewNamespaced[*v1beta1.NamespaceMap](s.ResourceIndexer, namespace)}
}

// NamespaceMapNamespaceLister helps list and get NamespaceMaps.
// All objects returned here must be treated as read-only.
type NamespaceMapNamespaceLister interface {
	// List lists all NamespaceMaps in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.NamespaceMap, err error)
	// Get retrieves the NamespaceMap from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.NamespaceMap, error)
	NamespaceMapNamespaceListerExpansion
}

// namespaceMapNamespaceLister implements the NamespaceMapNamespaceLister
// interface.
type namespaceMapNamespaceLister struct {
	listers.ResourceIndexer[*v1beta1.NamespaceMap]
}
