// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: pkg/ipam/ipam.proto

package ipam

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IPAM_IPAcquire_FullMethodName          = "/IPAM/IPAcquire"
	IPAM_IPRelease_FullMethodName          = "/IPAM/IPRelease"
	IPAM_NetworkAcquire_FullMethodName     = "/IPAM/NetworkAcquire"
	IPAM_NetworkRelease_FullMethodName     = "/IPAM/NetworkRelease"
	IPAM_NetworkIsAvailable_FullMethodName = "/IPAM/NetworkIsAvailable"
)

// IPAMClient is the client API for IPAM service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IPAMClient interface {
	IPAcquire(ctx context.Context, in *IPAcquireRequest, opts ...grpc.CallOption) (*IPAcquireResponse, error)
	IPRelease(ctx context.Context, in *IPReleaseRequest, opts ...grpc.CallOption) (*IPReleaseResponse, error)
	NetworkAcquire(ctx context.Context, in *NetworkAcquireRequest, opts ...grpc.CallOption) (*NetworkAcquireResponse, error)
	NetworkRelease(ctx context.Context, in *NetworkReleaseRequest, opts ...grpc.CallOption) (*NetworkReleaseResponse, error)
	NetworkIsAvailable(ctx context.Context, in *NetworkAvailableRequest, opts ...grpc.CallOption) (*NetworkAvailableResponse, error)
}

type iPAMClient struct {
	cc grpc.ClientConnInterface
}

func NewIPAMClient(cc grpc.ClientConnInterface) IPAMClient {
	return &iPAMClient{cc}
}

func (c *iPAMClient) IPAcquire(ctx context.Context, in *IPAcquireRequest, opts ...grpc.CallOption) (*IPAcquireResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IPAcquireResponse)
	err := c.cc.Invoke(ctx, IPAM_IPAcquire_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPAMClient) IPRelease(ctx context.Context, in *IPReleaseRequest, opts ...grpc.CallOption) (*IPReleaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IPReleaseResponse)
	err := c.cc.Invoke(ctx, IPAM_IPRelease_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPAMClient) NetworkAcquire(ctx context.Context, in *NetworkAcquireRequest, opts ...grpc.CallOption) (*NetworkAcquireResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkAcquireResponse)
	err := c.cc.Invoke(ctx, IPAM_NetworkAcquire_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPAMClient) NetworkRelease(ctx context.Context, in *NetworkReleaseRequest, opts ...grpc.CallOption) (*NetworkReleaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkReleaseResponse)
	err := c.cc.Invoke(ctx, IPAM_NetworkRelease_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPAMClient) NetworkIsAvailable(ctx context.Context, in *NetworkAvailableRequest, opts ...grpc.CallOption) (*NetworkAvailableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkAvailableResponse)
	err := c.cc.Invoke(ctx, IPAM_NetworkIsAvailable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IPAMServer is the server API for IPAM service.
// All implementations must embed UnimplementedIPAMServer
// for forward compatibility.
type IPAMServer interface {
	IPAcquire(context.Context, *IPAcquireRequest) (*IPAcquireResponse, error)
	IPRelease(context.Context, *IPReleaseRequest) (*IPReleaseResponse, error)
	NetworkAcquire(context.Context, *NetworkAcquireRequest) (*NetworkAcquireResponse, error)
	NetworkRelease(context.Context, *NetworkReleaseRequest) (*NetworkReleaseResponse, error)
	NetworkIsAvailable(context.Context, *NetworkAvailableRequest) (*NetworkAvailableResponse, error)
	mustEmbedUnimplementedIPAMServer()
}

// UnimplementedIPAMServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIPAMServer struct{}

func (UnimplementedIPAMServer) IPAcquire(context.Context, *IPAcquireRequest) (*IPAcquireResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IPAcquire not implemented")
}
func (UnimplementedIPAMServer) IPRelease(context.Context, *IPReleaseRequest) (*IPReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IPRelease not implemented")
}
func (UnimplementedIPAMServer) NetworkAcquire(context.Context, *NetworkAcquireRequest) (*NetworkAcquireResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetworkAcquire not implemented")
}
func (UnimplementedIPAMServer) NetworkRelease(context.Context, *NetworkReleaseRequest) (*NetworkReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetworkRelease not implemented")
}
func (UnimplementedIPAMServer) NetworkIsAvailable(context.Context, *NetworkAvailableRequest) (*NetworkAvailableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetworkIsAvailable not implemented")
}
func (UnimplementedIPAMServer) mustEmbedUnimplementedIPAMServer() {}
func (UnimplementedIPAMServer) testEmbeddedByValue()              {}

// UnsafeIPAMServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IPAMServer will
// result in compilation errors.
type UnsafeIPAMServer interface {
	mustEmbedUnimplementedIPAMServer()
}

func RegisterIPAMServer(s grpc.ServiceRegistrar, srv IPAMServer) {
	// If the following call pancis, it indicates UnimplementedIPAMServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IPAM_ServiceDesc, srv)
}

func _IPAM_IPAcquire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPAcquireRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPAMServer).IPAcquire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IPAM_IPAcquire_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPAMServer).IPAcquire(ctx, req.(*IPAcquireRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPAM_IPRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPAMServer).IPRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IPAM_IPRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPAMServer).IPRelease(ctx, req.(*IPReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPAM_NetworkAcquire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkAcquireRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPAMServer).NetworkAcquire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IPAM_NetworkAcquire_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPAMServer).NetworkAcquire(ctx, req.(*NetworkAcquireRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPAM_NetworkRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPAMServer).NetworkRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IPAM_NetworkRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPAMServer).NetworkRelease(ctx, req.(*NetworkReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPAM_NetworkIsAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkAvailableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPAMServer).NetworkIsAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IPAM_NetworkIsAvailable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPAMServer).NetworkIsAvailable(ctx, req.(*NetworkAvailableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IPAM_ServiceDesc is the grpc.ServiceDesc for IPAM service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IPAM_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "IPAM",
	HandlerType: (*IPAMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IPAcquire",
			Handler:    _IPAM_IPAcquire_Handler,
		},
		{
			MethodName: "IPRelease",
			Handler:    _IPAM_IPRelease_Handler,
		},
		{
			MethodName: "NetworkAcquire",
			Handler:    _IPAM_NetworkAcquire_Handler,
		},
		{
			MethodName: "NetworkRelease",
			Handler:    _IPAM_NetworkRelease_Handler,
		},
		{
			MethodName: "NetworkIsAvailable",
			Handler:    _IPAM_NetworkIsAvailable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/ipam/ipam.proto",
}
