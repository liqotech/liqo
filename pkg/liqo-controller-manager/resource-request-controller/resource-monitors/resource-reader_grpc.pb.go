// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.5
// source: resource-reader.proto

package resourcemonitors

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ResourceReader_ReadResources_FullMethodName = "/resource_reader/ReadResources"
	ResourceReader_RemoveCluster_FullMethodName = "/resource_reader/RemoveCluster"
	ResourceReader_Subscribe_FullMethodName     = "/resource_reader/Subscribe"
)

// ResourceReaderClient is the client API for ResourceReader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceReaderClient interface {
	ReadResources(ctx context.Context, in *ClusterIdentity, opts ...grpc.CallOption) (*PoolResourceList, error)
	RemoveCluster(ctx context.Context, in *ClusterIdentity, opts ...grpc.CallOption) (*Empty, error)
	Subscribe(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ResourceReader_SubscribeClient, error)
}

type resourceReaderClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceReaderClient(cc grpc.ClientConnInterface) ResourceReaderClient {
	return &resourceReaderClient{cc}
}

func (c *resourceReaderClient) ReadResources(ctx context.Context, in *ClusterIdentity, opts ...grpc.CallOption) (*PoolResourceList, error) {
	out := new(PoolResourceList)
	err := c.cc.Invoke(ctx, ResourceReader_ReadResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceReaderClient) RemoveCluster(ctx context.Context, in *ClusterIdentity, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ResourceReader_RemoveCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceReaderClient) Subscribe(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ResourceReader_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ResourceReader_ServiceDesc.Streams[0], ResourceReader_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &resourceReaderSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ResourceReader_SubscribeClient interface {
	Recv() (*ClusterIdentity, error)
	grpc.ClientStream
}

type resourceReaderSubscribeClient struct {
	grpc.ClientStream
}

func (x *resourceReaderSubscribeClient) Recv() (*ClusterIdentity, error) {
	m := new(ClusterIdentity)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ResourceReaderServer is the server API for ResourceReader service.
// All implementations must embed UnimplementedResourceReaderServer
// for forward compatibility
type ResourceReaderServer interface {
	ReadResources(context.Context, *ClusterIdentity) (*PoolResourceList, error)
	RemoveCluster(context.Context, *ClusterIdentity) (*Empty, error)
	Subscribe(*Empty, ResourceReader_SubscribeServer) error
	mustEmbedUnimplementedResourceReaderServer()
}

// UnimplementedResourceReaderServer must be embedded to have forward compatible implementations.
type UnimplementedResourceReaderServer struct {
}

func (UnimplementedResourceReaderServer) ReadResources(context.Context, *ClusterIdentity) (*PoolResourceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadResources not implemented")
}
func (UnimplementedResourceReaderServer) RemoveCluster(context.Context, *ClusterIdentity) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCluster not implemented")
}
func (UnimplementedResourceReaderServer) Subscribe(*Empty, ResourceReader_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedResourceReaderServer) mustEmbedUnimplementedResourceReaderServer() {}

// UnsafeResourceReaderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceReaderServer will
// result in compilation errors.
type UnsafeResourceReaderServer interface {
	mustEmbedUnimplementedResourceReaderServer()
}

func RegisterResourceReaderServer(s grpc.ServiceRegistrar, srv ResourceReaderServer) {
	s.RegisterService(&ResourceReader_ServiceDesc, srv)
}

func _ResourceReader_ReadResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceReaderServer).ReadResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceReader_ReadResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceReaderServer).ReadResources(ctx, req.(*ClusterIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceReader_RemoveCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceReaderServer).RemoveCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceReader_RemoveCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceReaderServer).RemoveCluster(ctx, req.(*ClusterIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceReader_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourceReaderServer).Subscribe(m, &resourceReaderSubscribeServer{stream})
}

type ResourceReader_SubscribeServer interface {
	Send(*ClusterIdentity) error
	grpc.ServerStream
}

type resourceReaderSubscribeServer struct {
	grpc.ServerStream
}

func (x *resourceReaderSubscribeServer) Send(m *ClusterIdentity) error {
	return x.ServerStream.SendMsg(m)
}

// ResourceReader_ServiceDesc is the grpc.ServiceDesc for ResourceReader service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceReader_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "resource_reader",
	HandlerType: (*ResourceReaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadResources",
			Handler:    _ResourceReader_ReadResources_Handler,
		},
		{
			MethodName: "RemoveCluster",
			Handler:    _ResourceReader_RemoveCluster_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _ResourceReader_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "resource-reader.proto",
}
